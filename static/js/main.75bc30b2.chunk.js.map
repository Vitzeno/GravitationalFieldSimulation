{"version":3,"sources":["renderer.tsx","primatives/camera.tsx","primatives/orbit-camera.tsx","primatives/scene.tsx","primatives/trail.tsx","scenes/solar-system/planet.tsx","primatives/renderable.tsx","scenes/solar-system/solar-system-scene.tsx","primatives/object-picker.tsx","index.tsx"],"names":["camera","scene","renderer","renderPass","outlinePass","composer","picker","Camera","fov","aspect","near","far","position","threeCamera","targetObject","target","update","deltaTime","this","THREE","copy","OrbitCamera","domElement","controls","zoomSpeed","rotateSpeed","panSpeed","lookAt","OrbitControls","Scene","threeScene","Trail","trailLength","colour","trailObject","geometry","material","positions","counter","addPoint","point","mappedIndex","dummy","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","Array","fill","color","Planet","name","mass","radius","initialVelocity","wireframe","currentVelocity","gravitationalConstant","trail","frameCount","frameUpdate","threeObject","rotateY","add","updateVelocity","planets","forEach","planet","distance","distanceTo","acceleration","clone","sub","normalize","multiplyScalar","Math","pow","divideScalar","turnOnTrails","threeParentScene","turnOffTrails","remove","rotateX","rotateZ","SolarSystemScene","enableGridX","enableGridY","enableGridZ","gridSize","gridDivisions","gridColour","gridX","gridY","gridZ","PI","ObjectPicker","interactables","raycaster","mouse","onMouseMove","event","x","clientX","window","innerWidth","y","clientY","innerHeight","findIntersectedObject","setFromCamera","intersects","intersectObjects","children","i","find","intractable","id","object","length","pickedObject","selectedObjects","addEventListener","clock","renderLoop","requestAnimationFrame","getDelta","document","title","round","render","resizeWindow","updateProjectionMatrix","setSize","init","antialias","setupRenderer","body","appendChild","RenderPass","OutlinePass","edgeStrength","EffectComposer","addPass","RenderScene","useEffect","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.75bc30b2.chunk.js","sourcesContent":["import { FC, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Camera } from \"./primatives/camera\";\r\nimport { OrbitCamera } from \"./primatives/orbit-camera\";\r\nimport { SolarSystemScene } from \"./scenes/solar-system/solar-system-scene\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\nimport { ObjectPicker } from \"./primatives/object-picker\";\r\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\r\n\r\nlet camera: Camera;\r\nlet scene: SolarSystemScene;\r\nlet renderer: THREE.WebGLRenderer;\r\n\r\nlet renderPass: RenderPass;\r\nlet outlinePass: OutlinePass;\r\nlet composer: EffectComposer;\r\n\r\nlet picker: ObjectPicker;\r\n\r\nlet clock = new THREE.Clock();\r\nlet deltaTime = 0;\r\n\r\nconst setupRenderer = () => {\r\n  let renderer: THREE.WebGLRenderer;\r\n  renderer = new THREE.WebGLRenderer({ antialias: true });\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  return renderer;\r\n};\r\n\r\n/**\r\n * Render loop called every frame, updates the scene and renders it.\r\n */\r\nconst renderLoop = () => {\r\n  requestAnimationFrame(renderLoop);\r\n  deltaTime = clock.getDelta();\r\n  //Probably a better way to do this\r\n  document.title = `FPS: ${Math.round(1 / deltaTime)}`;\r\n\r\n  camera.targetObject(picker.findIntersectedObject()?.threeObject.position);\r\n\r\n  picker.update(outlinePass, deltaTime);\r\n  scene.update(deltaTime);\r\n  camera.update(deltaTime);\r\n\r\n  composer.render(deltaTime);\r\n};\r\n\r\nconst resizeWindow = () => {\r\n  camera.threeCamera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.threeCamera.updateProjectionMatrix();\r\n\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n};\r\n\r\nconst init = () => {\r\n  scene = new SolarSystemScene({\r\n    enableGridX: false,\r\n    enableGridY: false,\r\n    enableGridZ: true,\r\n  });\r\n  renderer = setupRenderer();\r\n  camera = new OrbitCamera({\r\n    fov: 90,\r\n    aspect: window.innerWidth / window.innerHeight,\r\n    near: 0.1,\r\n    far: 10000000,\r\n    position: new THREE.Vector3(-700, 5000, 4000),\r\n    target: new THREE.Vector3(0, 0, -500),\r\n    domElement: renderer.domElement,\r\n  });\r\n  picker = new ObjectPicker({\r\n    camera: camera.threeCamera,\r\n    scene: scene.threeScene,\r\n    interactables: scene.planets,\r\n  });\r\n\r\n  document.body.appendChild(renderer.domElement);\r\n  window.addEventListener(\"resize\", resizeWindow, false);\r\n\r\n  renderPass = new RenderPass(scene.threeScene, camera.threeCamera);\r\n  outlinePass = new OutlinePass(\r\n    new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n    scene.threeScene,\r\n    camera.threeCamera\r\n  );\r\n  outlinePass.edgeStrength = 250;\r\n\r\n  composer = new EffectComposer(renderer);\r\n  composer.addPass(renderPass);\r\n  composer.addPass(outlinePass);\r\n\r\n  renderLoop();\r\n};\r\n\r\nexport const RenderScene: FC = () => {\r\n  useEffect(() => {\r\n    init();\r\n  });\r\n\r\n  return <></>;\r\n};\r\n","import * as THREE from \"three\";\n\nexport interface CameraParams {\n  fov: number;\n  aspect: number;\n  near: number;\n  far: number;\n  position: THREE.Vector3;\n}\n\nexport class Camera {\n  threeCamera: THREE.PerspectiveCamera;\n\n  constructor({ fov, aspect, near, far, position }: CameraParams) {\n    this.threeCamera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    this.threeCamera.position.copy(position);\n  }\n\n  targetObject = (target?: THREE.Vector3) => {};\n\n  /**\n   * Updates object parameters, typically called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {};\n}\n","import * as THREE from \"three\";\r\nimport { Camera, CameraParams } from \"./camera\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport interface OrbitCameraParams extends CameraParams {\r\n  domElement?: HTMLElement | undefined;\r\n  target: THREE.Vector3;\r\n}\r\n\r\n/**\r\n * Orbit camera allows for rotating around a given target.\r\n */\r\nexport class OrbitCamera extends Camera {\r\n  domElement?: HTMLElement | undefined;\r\n  controls: OrbitControls;\r\n  target: THREE.Vector3;\r\n\r\n  zoomSpeed: number = 2;\r\n  rotateSpeed: number = 2;\r\n  panSpeed: number = 2;\r\n\r\n  constructor({\r\n    fov,\r\n    aspect,\r\n    near,\r\n    far,\r\n    position,\r\n    target,\r\n    domElement,\r\n  }: OrbitCameraParams) {\r\n    super({ fov, aspect, near, far, position });\r\n    this.domElement = domElement;\r\n    this.target = target;\r\n\r\n    this.threeCamera.lookAt(target);\r\n    this.controls = new OrbitControls(this.threeCamera, this.domElement);\r\n    // orbit camera requires a target\r\n    this.controls.target.copy(target);\r\n\r\n    this.controls.zoomSpeed = this.zoomSpeed;\r\n    this.controls.rotateSpeed = this.rotateSpeed;\r\n    this.controls.panSpeed = this.panSpeed;\r\n\r\n    this.controls.update();\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.controls.update();\r\n    this.controls.target.copy(this.target);\r\n  };\r\n\r\n  targetObject = (target?: THREE.Vector3) => {\r\n    this.target.copy(target || this.target);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\n\nexport class Scene {\n  threeScene: THREE.Scene;\n\n  constructor() {\n    this.threeScene = new THREE.Scene();\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    //console.log(\"update scene\");\n  };\n}\n","import * as THREE from \"three\";\r\n\r\nexport interface TrailParams {\r\n  trailLength: number;\r\n  colour: THREE.Color;\r\n}\r\n\r\n/**\r\n * Renders a trails, points are added dynamically to the trail.\r\n */\r\nexport class Trail {\r\n  trailObject: THREE.InstancedMesh;\r\n  geometry: THREE.BufferGeometry;\r\n  material: THREE.Material;\r\n\r\n  positions: THREE.Vector3[];\r\n  counter: number;\r\n  trailLength: number;\r\n\r\n  constructor({ trailLength, colour }: TrailParams) {\r\n    this.trailLength = trailLength;\r\n    this.counter = 0;\r\n    this.positions = new Array<THREE.Vector3>(this.trailLength);\r\n    this.positions.fill(new THREE.Vector3(0, 0, 0));\r\n\r\n    this.material = new THREE.MeshBasicMaterial({\r\n      color: colour,\r\n      //wireframe: true,\r\n    });\r\n    this.geometry = new THREE.SphereGeometry(7, 5, 5);\r\n\r\n    this.trailObject = new THREE.InstancedMesh(\r\n      this.geometry,\r\n      this.material,\r\n      this.trailLength\r\n    );\r\n\r\n    this.trailObject.instanceMatrix.needsUpdate = true;\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    //console.log(this.points);\r\n  };\r\n\r\n  /**\r\n   * Since the trail is a line of type BufferGeometry whose size cannot be changed,\r\n   * we instead have a fixed length trail where old points are removed and new points are added.\r\n   * @param point\r\n   */\r\n  addPoint = (point: THREE.Vector3) => {\r\n    let mappedIndex = this.counter++;\r\n    let dummy = new THREE.Object3D();\r\n    dummy.position.copy(point);\r\n    dummy.updateMatrix();\r\n    this.trailObject.setMatrixAt(mappedIndex, dummy.matrix);\r\n    this.counter %= this.trailLength;\r\n    this.trailObject.instanceMatrix.needsUpdate = true;\r\n    //console.log(mappedIndex);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\nimport { Renderable, RenderableParams } from \"../../primatives/renderable\";\nimport { Trail } from \"../../primatives/trail\";\n\nexport interface PlanetParams\n  extends Omit<RenderableParams, \"geometry\" | \"material\"> {\n  mass: number;\n  radius: number;\n  colour: THREE.Color;\n  position: THREE.Vector3;\n  initialVelocity: THREE.Vector3;\n}\n\nexport class Planet extends Renderable {\n  mass: number;\n  radius: number;\n  colour: THREE.Color;\n\n  initialVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  currentVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n\n  gravitationalConstant: number = 6.67408e-11;\n\n  trail: Trail;\n\n  frameCount: number = 0;\n  frameUpdate: number = 75;\n\n  constructor({\n    position,\n    name,\n    mass,\n    radius,\n    colour,\n    initialVelocity,\n    scene,\n  }: PlanetParams) {\n    super({\n      geometry: new THREE.SphereGeometry(radius, 32, 32),\n      material: new THREE.MeshBasicMaterial({ color: colour, wireframe: true }),\n      scene,\n      name,\n    });\n    this.mass = mass;\n    this.radius = radius;\n    this.colour = colour;\n\n    this.threeObject.position.copy(position);\n    this.initialVelocity = initialVelocity;\n    this.currentVelocity = this.initialVelocity;\n\n    this.trail = new Trail({ trailLength: 100, colour: this.colour });\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.frameCount++;\n    this.threeObject.rotateY(deltaTime * 0.1);\n    this.threeObject.position.add(this.currentVelocity);\n\n    // call update every value of frameUpdate\n    if (this.frameCount === this.frameUpdate)\n      this.trail.addPoint(this.threeObject.position);\n\n    this.frameCount %= this.frameUpdate;\n  };\n\n  updateVelocity = (planets: Planet[], deltaTime: number) => {\n    //console.log(\"update planet velocity\");\n    planets.forEach((planet) => {\n      if (planet !== this) {\n        let distance = this.threeObject.position.distanceTo(\n          planet.threeObject.position\n        );\n        //multiply by -1 otherwise the planets will be moving away from each other\n        let forceDir: THREE.Vector3 = this.threeObject.position\n          .clone()\n          .sub(planet.threeObject.position)\n          .normalize()\n          .multiplyScalar(-1);\n        let force: THREE.Vector3 = forceDir.multiplyScalar(\n          (this.gravitationalConstant * this.mass * planet.mass) /\n            Math.pow(distance, 2)\n        );\n\n        let acceleration: THREE.Vector3 = force.divideScalar(this.mass);\n        this.currentVelocity.add(acceleration.multiplyScalar(deltaTime));\n      }\n    });\n  };\n\n  turnOnTrails = () => {\n    this.threeParentScene.add(this.trail.trailObject);\n  };\n\n  turnOffTrails = () => {\n    this.threeParentScene.remove(this.trail.trailObject);\n  };\n}\n","import * as THREE from \"three\";\n\nexport interface RenderableParams {\n  geometry: THREE.BufferGeometry;\n  material: THREE.Material;\n  name: string;\n  scene: THREE.Scene;\n}\nexport class Renderable {\n  threeObject: THREE.Object3D;\n  threeParentScene: THREE.Scene;\n\n  geometry: THREE.BufferGeometry;\n  material: THREE.Material;\n  name: string;\n\n  constructor({ geometry, material, scene, name }: RenderableParams) {\n    this.geometry = geometry;\n    this.material = material;\n    this.name = name;\n    this.threeParentScene = scene;\n    this.threeObject = new THREE.Mesh(this.geometry, this.material);\n\n    // every renderable now has a parent scene, it need to add itself to the scene\n    this.threeParentScene.add(this.threeObject);\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.threeObject.rotateX(deltaTime * 1);\n    this.threeObject.rotateY(deltaTime * 1);\n    this.threeObject.rotateZ(deltaTime * 1);\n  };\n}\n","import * as THREE from \"three\";\r\nimport { Scene } from \"../../primatives/scene\";\r\nimport { Planet } from \"../../scenes/solar-system/planet\";\r\n\r\nexport interface SolarSystemSceneParams {\r\n  enableGridX: boolean;\r\n  enableGridY: boolean;\r\n  enableGridZ: boolean;\r\n}\r\nexport class SolarSystemScene extends Scene {\r\n  gridSize = 1.0e5;\r\n  gridDivisions = 3.0e2;\r\n  gridColour = new THREE.Color(0x666666);\r\n\r\n  gridX = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n  gridY = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n  gridZ = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n\r\n  planets: Planet[] = [\r\n    //Sun\r\n    new Planet({\r\n      name: \"Sun\",\r\n      mass: 1.25e16,\r\n      radius: 796.34,\r\n      colour: new THREE.Color(0xfff00),\r\n      position: new THREE.Vector3(0, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, 0, 0),\r\n      scene: this.threeScene,\r\n    }),\r\n    //Earth\r\n    new Planet({\r\n      name: \"Earth\",\r\n      mass: 1.0e15,\r\n      radius: 63.71,\r\n      colour: new THREE.Color(0x0000ff),\r\n      position: new THREE.Vector3(5000, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, 0, -0.75),\r\n      scene: this.threeScene,\r\n    }),\r\n    //Moon\r\n    new Planet({\r\n      name: \"Moon\",\r\n      mass: 1.0e3,\r\n      radius: 17.37,\r\n      colour: new THREE.Color(0xcccccc),\r\n      position: new THREE.Vector3(5384, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, -1, -0.75),\r\n      scene: this.threeScene,\r\n    }),\r\n    //Mars\r\n    new Planet({\r\n      name: \"Mars\",\r\n      mass: 1.0e15,\r\n      radius: 63.71,\r\n      colour: new THREE.Color(0xcc0000),\r\n      position: new THREE.Vector3(-5000, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, 0, 0.75),\r\n      scene: this.threeScene,\r\n    }),\r\n    //Deimos\r\n    new Planet({\r\n      name: \"Deimos\",\r\n      mass: 1.0e3,\r\n      radius: 17.37,\r\n      colour: new THREE.Color(0xcccccc),\r\n      position: new THREE.Vector3(-5384, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, 1, 0.75),\r\n      scene: this.threeScene,\r\n    }),\r\n    //Jupiter\r\n    // new Planet({\r\n    //   name: \"Jupiter\",\r\n    //   mass: 2.0e15,\r\n    //   radius: 342.81,\r\n    //   colour: new THREE.Color(0xc27ba0),\r\n    //   position: new THREE.Vector3(7000, 7000, -500),\r\n    //   initialVelocity: new THREE.Vector3(0, -0.5, 0.5),\r\n    //   scene: this.threeScene,\r\n    // }),\r\n  ];\r\n\r\n  constructor({\r\n    enableGridX,\r\n    enableGridY,\r\n    enableGridZ,\r\n  }: SolarSystemSceneParams) {\r\n    super();\r\n    // setup grid\r\n    if (enableGridX) {\r\n      this.gridX.rotateZ(Math.PI / 2);\r\n      this.threeScene.add(this.gridX);\r\n    }\r\n\r\n    if (enableGridY) {\r\n      this.gridY.rotateX(Math.PI / 2);\r\n      this.threeScene.add(this.gridY);\r\n    }\r\n\r\n    if (enableGridZ) {\r\n      this.threeScene.add(this.gridZ);\r\n    }\r\n\r\n    // turn on trails for visualisation of movement\r\n    this.planets.forEach((planet) => {\r\n      planet.turnOnTrails();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.planets.forEach((planet) => {\r\n      planet.updateVelocity(this.planets, deltaTime);\r\n      planet.update(deltaTime);\r\n    });\r\n  };\r\n}\r\n","import * as THREE from \"three\";\nimport { Renderable } from \"./renderable\";\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\n\nexport interface MouseHandlerParams {\n  camera: THREE.Camera;\n  scene: THREE.Scene;\n  interactables: Renderable[];\n}\n\nexport class ObjectPicker {\n  raycaster = new THREE.Raycaster();\n  mouse = new THREE.Vector2();\n\n  camera: THREE.Camera;\n  scene: THREE.Scene;\n  interactables: Renderable[];\n\n  constructor({ camera, scene, interactables }: MouseHandlerParams) {\n    this.camera = camera;\n    this.scene = scene;\n    this.interactables = interactables;\n    window.addEventListener(\"mousemove\", this.onMouseMove, false);\n  }\n\n  onMouseMove = (event: MouseEvent) => {\n    this.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    this.mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n  };\n\n  findIntersectedObject = (): Renderable | undefined => {\n    let intersectedObject: Renderable | undefined;\n    // update the picking ray with the camera and mouse position\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    // calculate objects intersecting the picking ray\n    const intersects = this.raycaster.intersectObjects(this.scene.children);\n    for (let i = 0; i < intersects.length; i++) {\n      intersectedObject = this.interactables.find(\n        (intractable) => intractable.threeObject.id === intersects[i].object.id\n      );\n\n      return intersectedObject;\n    }\n  };\n\n  /**\n   * Updates object parameters, typically called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (outlinePass: OutlinePass, deltaTime: number) => {\n    //console.log(\"mouse update\");\n    let pickedObject = this.findIntersectedObject();\n    if (pickedObject) {\n      outlinePass.selectedObjects = [pickedObject.threeObject];\n    }\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RenderScene } from \"./renderer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RenderScene />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}