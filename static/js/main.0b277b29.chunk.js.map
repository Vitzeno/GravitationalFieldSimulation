{"version":3,"sources":["renderer.tsx","primatives/camera.tsx","primatives/orbit-camera.tsx","primatives/scene.tsx","primatives/trail.tsx","scenes/solar-system/planet.tsx","primatives/renderable.tsx","scenes/solar-system/solar-system-scene.tsx","index.tsx"],"names":["camera","scene","renderer","composer","Camera","fov","aspect","near","far","position","threeCamera","update","deltaTime","this","THREE","copy","OrbitCamera","target","domElement","controls","zoomSpeed","rotateSpeed","panSpeed","console","log","lookAt","OrbitControls","Scene","threeScene","Trail","trailLength","trailObject","geometry","material","positions","counter","addPoint","point","mappedIndex","dummy","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","Array","fill","color","Planet","name","mass","radius","colour","initialVelocity","wireframe","currentVelocity","gravitationalConstant","trail","frameCount","frameUpdate","threeObject","rotateY","add","updateVelocity","planets","forEach","planet","distance","distanceTo","acceleration","clone","sub","normalize","multiplyScalar","Math","pow","divideScalar","turnOnTrails","threeParentScene","turnOffTrails","remove","rotateX","rotateZ","SolarSystemScene","enableGridX","enableGridY","enableGridZ","gridSize","gridDivisions","gridX","gridY","gridZ","object","PI","clock","renderLoop","requestAnimationFrame","getDelta","document","title","render","resizeWindow","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","init","antialias","setupRenderer","body","appendChild","addEventListener","renderPass","RenderPass","EffectComposer","addPass","RenderScene","useEffect","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0b277b29.chunk.js","sourcesContent":["import { FC, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Camera } from \"./primatives/camera\";\r\nimport { OrbitCamera } from \"./primatives/orbit-camera\";\r\nimport { SolarSystemScene } from \"./scenes/solar-system/solar-system-scene\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\n\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nlet camera: Camera;\r\nlet scene: SolarSystemScene;\r\nlet renderer: THREE.WebGLRenderer;\r\nlet composer: EffectComposer;\r\n\r\nlet clock = new THREE.Clock();\r\nlet deltaTime = 0;\r\n\r\nconst setupRenderer = () => {\r\n  let renderer: THREE.WebGLRenderer;\r\n  renderer = new THREE.WebGLRenderer({ antialias: true });\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  return renderer;\r\n};\r\n\r\n/**\r\n * Render loop called every frame, updates the scene and renders it.\r\n */\r\nconst renderLoop = () => {\r\n  requestAnimationFrame(renderLoop);\r\n  deltaTime = clock.getDelta();\r\n  //Probably a better way to do this\r\n  document.title = `FPS: ${1 / deltaTime}`;\r\n\r\n  scene.update(deltaTime);\r\n  scene.planets.forEach((object) => object.update(deltaTime));\r\n  camera.update(deltaTime);\r\n\r\n  composer.render(deltaTime);\r\n  //renderer.render(scene.threeScene, camera.threeCamera);\r\n};\r\n\r\nconst resizeWindow = () => {\r\n  camera.threeCamera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.threeCamera.updateProjectionMatrix();\r\n\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n};\r\n\r\nconst init = () => {\r\n  scene = new SolarSystemScene({\r\n    enableGridX: true,\r\n    enableGridY: true,\r\n    enableGridZ: true,\r\n  });\r\n  renderer = setupRenderer();\r\n  camera = new OrbitCamera({\r\n    fov: 90,\r\n    aspect: window.innerWidth / window.innerHeight,\r\n    near: 0.1,\r\n    far: 10000000,\r\n    position: new THREE.Vector3(-700, 2000, 900),\r\n    target: new THREE.Vector3(0, 0, -500),\r\n    domElement: renderer.domElement,\r\n  });\r\n\r\n  document.body.appendChild(renderer.domElement);\r\n  window.addEventListener(\"resize\", resizeWindow, false);\r\n\r\n  let renderPass = new RenderPass(scene.threeScene, camera.threeCamera);\r\n  composer = new EffectComposer(renderer);\r\n  composer.addPass(renderPass);\r\n\r\n  renderLoop();\r\n};\r\n\r\nexport const RenderScene: FC<Props> = ({ name }) => {\r\n  useEffect(() => {\r\n    init();\r\n  });\r\n\r\n  return <></>;\r\n};\r\n","import * as THREE from \"three\";\n\nexport interface CameraParams {\n  fov: number;\n  aspect: number;\n  near: number;\n  far: number;\n  position: THREE.Vector3;\n}\n\nexport class Camera {\n  threeCamera: THREE.PerspectiveCamera;\n\n  constructor({ fov, aspect, near, far, position }: CameraParams) {\n    this.threeCamera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    this.threeCamera.position.copy(position);\n  }\n\n  /**\n   * Updates object parameters, typically called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {};\n}\n","import * as THREE from \"three\";\nimport { Camera, CameraParams } from \"./camera\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport interface OrbitCameraParams extends CameraParams {\n  domElement?: HTMLElement | undefined;\n  target: THREE.Vector3;\n}\n\n/**\n * Orbit camera allows for rotating around a given target.\n */\nexport class OrbitCamera extends Camera {\n  domElement?: HTMLElement | undefined;\n  controls: OrbitControls;\n  target: THREE.Vector3;\n\n  zoomSpeed: number = 2;\n  rotateSpeed: number = 2;\n  panSpeed: number = 2;\n\n  constructor({\n    fov,\n    aspect,\n    near,\n    far,\n    position,\n    target,\n    domElement,\n  }: OrbitCameraParams) {\n    super({ fov, aspect, near, far, position });\n    this.domElement = domElement;\n    this.target = target;\n\n    this.threeCamera.lookAt(target);\n    this.controls = new OrbitControls(this.threeCamera, this.domElement);\n    // orbit camera requires a target\n    this.controls.target.copy(target);\n\n    this.controls.zoomSpeed = this.zoomSpeed;\n    this.controls.rotateSpeed = this.rotateSpeed;\n    this.controls.panSpeed = this.panSpeed;\n\n    this.controls.update();\n  }\n\n  /**\n   * Updates object parameters, typically called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.controls.update();\n    console.log(this.threeCamera.position);\n  };\n}\n","import * as THREE from \"three\";\n\nexport class Scene {\n  threeScene: THREE.Scene;\n\n  constructor() {\n    this.threeScene = new THREE.Scene();\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    //console.log(\"update scene\");\n  };\n}\n","import * as THREE from \"three\";\n\n/**\n * Renders a trails, points are added dynamically to the trail.\n */\nexport class Trail {\n  trailObject: THREE.InstancedMesh;\n  geometry: THREE.BufferGeometry;\n  material: THREE.Material;\n\n  positions: THREE.Vector3[];\n  counter: number;\n  trailLength: number;\n\n  constructor(trailLength: number = 250) {\n    this.trailLength = trailLength;\n    this.counter = 0;\n    this.positions = new Array<THREE.Vector3>(this.trailLength);\n    this.positions.fill(new THREE.Vector3(0, 0, 0));\n\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0xcccccc,\n      //wireframe: true,\n    });\n    this.geometry = new THREE.SphereGeometry(7, 5, 5);\n\n    this.trailObject = new THREE.InstancedMesh(\n      this.geometry,\n      this.material,\n      this.trailLength\n    );\n\n    this.trailObject.instanceMatrix.needsUpdate = true;\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    //console.log(this.points);\n  };\n\n  /**\n   * Since the trail is a line of type BufferGeometry whose size cannot be changed,\n   * we instead have a fixed length trail where old points are removed and new points are added.\n   * @param point\n   */\n  addPoint = (point: THREE.Vector3) => {\n    let mappedIndex = this.counter++;\n    let dummy = new THREE.Object3D();\n    dummy.position.copy(point);\n    dummy.updateMatrix();\n    this.trailObject.setMatrixAt(mappedIndex, dummy.matrix);\n    this.counter %= this.trailLength;\n    this.trailObject.instanceMatrix.needsUpdate = true;\n    //console.log(mappedIndex);\n  };\n}\n","import * as THREE from \"three\";\nimport { Renderable, RenderableParams } from \"../../primatives/renderable\";\nimport { Trail } from \"../../primatives/trail\";\n\nexport interface PlanetParams\n  extends Omit<RenderableParams, \"geometry\" | \"material\"> {\n  name: string;\n  mass: number;\n  radius: number;\n  colour: THREE.Color;\n  position: THREE.Vector3;\n  initialVelocity: THREE.Vector3;\n}\n\nexport class Planet extends Renderable {\n  name: string;\n  mass: number;\n  radius: number;\n  colour: THREE.Color;\n\n  initialVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  currentVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n\n  gravitationalConstant: number = 6.67408e-11;\n\n  trail: Trail = new Trail();\n\n  frameCount: number = 0;\n  frameUpdate: number = 75;\n\n  constructor({\n    position,\n    name,\n    mass,\n    radius,\n    colour,\n    initialVelocity,\n    scene,\n  }: PlanetParams) {\n    super({\n      geometry: new THREE.SphereGeometry(radius, 32, 32),\n      material: new THREE.MeshBasicMaterial({ color: colour, wireframe: true }),\n      scene,\n    });\n    this.name = name;\n    this.mass = mass;\n    this.radius = radius;\n    this.colour = colour;\n\n    this.threeObject.position.copy(position);\n    this.initialVelocity = initialVelocity;\n    this.currentVelocity = this.initialVelocity;\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.frameCount++;\n    this.threeObject.rotateY(deltaTime * 0.1);\n    this.threeObject.position.add(this.currentVelocity);\n\n    // call update every value of frameUpdate\n    if (this.frameCount === this.frameUpdate)\n      this.trail.addPoint(this.threeObject.position);\n\n    this.frameCount %= this.frameUpdate;\n  };\n\n  updateVelocity = (planets: Planet[], deltaTime: number) => {\n    //console.log(\"update planet velocity\");\n    planets.forEach((planet) => {\n      if (planet !== this) {\n        let distance = this.threeObject.position.distanceTo(\n          planet.threeObject.position\n        );\n        //multiply by -1 otherwise the planets will be moving away from each other\n        let forceDir: THREE.Vector3 = this.threeObject.position\n          .clone()\n          .sub(planet.threeObject.position)\n          .normalize()\n          .multiplyScalar(-1);\n        let force: THREE.Vector3 = forceDir.multiplyScalar(\n          (this.gravitationalConstant * this.mass * planet.mass) /\n            Math.pow(distance, 2)\n        );\n\n        let acceleration: THREE.Vector3 = force.divideScalar(this.mass);\n        this.currentVelocity.add(acceleration.multiplyScalar(deltaTime));\n      }\n    });\n  };\n\n  turnOnTrails = () => {\n    this.threeParentScene.add(this.trail.trailObject);\n  };\n\n  turnOffTrails = () => {\n    this.threeParentScene.remove(this.trail.trailObject);\n  };\n}\n","import * as THREE from \"three\";\n\nexport interface RenderableParams {\n  geometry: THREE.BufferGeometry;\n  material: THREE.Material;\n  scene: THREE.Scene;\n}\nexport class Renderable {\n  threeObject: THREE.Object3D;\n  threeParentScene: THREE.Scene;\n\n  geometry: THREE.BufferGeometry;\n  material: THREE.Material;\n\n  constructor({ geometry, material, scene }: RenderableParams) {\n    this.geometry = geometry;\n    this.material = material;\n    this.threeParentScene = scene;\n    this.threeObject = new THREE.Mesh(this.geometry, this.material);\n\n    // every renderable now has a parent scene, it need to add itself to the scene\n    this.threeParentScene.add(this.threeObject);\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.threeObject.rotateX(deltaTime * 1);\n    this.threeObject.rotateY(deltaTime * 1);\n    this.threeObject.rotateZ(deltaTime * 1);\n  };\n}\n","import * as THREE from \"three\";\nimport { Scene } from \"../../primatives/scene\";\nimport { Planet } from \"../../scenes/solar-system/planet\";\n\nexport interface SolarSystemSceneParams {\n  enableGridX: boolean;\n  enableGridY: boolean;\n  enableGridZ: boolean;\n}\nexport class SolarSystemScene extends Scene {\n  gridSize = 1.0e5;\n  gridDivisions = 1.0e1;\n\n  gridX = new THREE.GridHelper(this.gridSize, this.gridDivisions);\n  gridY = new THREE.GridHelper(this.gridSize, this.gridDivisions);\n  gridZ = new THREE.GridHelper(this.gridSize, this.gridDivisions);\n\n  planets: Planet[] = [\n    //Sun\n    new Planet({\n      name: \"Sun\",\n      mass: 1.0e16,\n      radius: 696.34,\n      colour: new THREE.Color(0x00ff00),\n      position: new THREE.Vector3(0, 0, -500),\n      initialVelocity: new THREE.Vector3(0, 0, 0),\n      scene: this.threeScene,\n    }),\n    //Earth\n    new Planet({\n      name: \"Earth\",\n      mass: 1.0e15,\n      radius: 63.71,\n      colour: new THREE.Color(0x0000ff),\n      position: new THREE.Vector3(5000, 0, -500),\n      initialVelocity: new THREE.Vector3(0, 0, -0.5),\n      scene: this.threeScene,\n    }),\n    //Moon\n    new Planet({\n      name: \"Moon\",\n      mass: 1.0e3,\n      radius: 17.37,\n      colour: new THREE.Color(0xcccccc),\n      position: new THREE.Vector3(5384, 0, -500),\n      initialVelocity: new THREE.Vector3(0, 0, -1.5),\n      scene: this.threeScene,\n    }),\n  ];\n\n  constructor({\n    enableGridX,\n    enableGridY,\n    enableGridZ,\n  }: SolarSystemSceneParams) {\n    super();\n    // setup grid\n    if (enableGridX) {\n      this.gridX.rotateZ(Math.PI / 2);\n      this.threeScene.add(this.gridX);\n    }\n\n    if (enableGridY) {\n      this.gridY.rotateX(Math.PI / 2);\n      this.threeScene.add(this.gridY);\n    }\n\n    if (enableGridZ) {\n      this.threeScene.add(this.gridZ);\n    }\n\n    // turn on trails for visualisation of movement\n    this.planets.forEach((planet) => {\n      planet.turnOnTrails();\n    });\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.planets.forEach((object) => {\n      object.updateVelocity(this.planets, deltaTime);\n    });\n  };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RenderScene } from \"./renderer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RenderScene name=\"WebGL\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}