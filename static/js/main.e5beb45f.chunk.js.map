{"version":3,"sources":["renderer.tsx","primatives/camera.tsx","primatives/orbit-camera.tsx","primatives/trail.tsx","scenes/solar-system/planet.tsx","primatives/renderable.tsx","config.tsx","scenes/solar-system/solar-system-scene.tsx","primatives/scene.tsx","primatives/object-picker.tsx","upload.tsx","index.tsx"],"names":["camera","scene","renderer","renderPass","outlinePass","composer","picker","Camera","fov","aspect","near","far","position","threeCamera","targetObject","target","update","deltaTime","this","THREE","copy","OrbitCamera","domElement","controls","zoomSpeed","rotateSpeed","panSpeed","lookAt","OrbitControls","Trail","trailLength","colour","trailObject","geometry","material","positions","counter","addPoint","point","mappedIndex","dummy","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","Array","fill","color","Planet","name","mass","radius","initialVelocity","wireframe","currentVelocity","gravitationalConstant","trail","frameCount","frameUpdate","threeObject","rotateY","add","updateVelocity","planets","forEach","planet","distance","distanceTo","acceleration","clone","sub","normalize","multiplyScalar","Math","pow","divideScalar","turnOnTrails","threeParentScene","turnOffTrails","remove","rotateX","rotateZ","customPlanetConfig","defaultPlanetConfig","x","y","z","importPlanetConfig","planetProps","console","log","currPlanet","newPlanet","push","SolarSystemScene","enableGridX","enableGridY","enableGridZ","useCustomConfig","gridSize","gridDivisions","gridColour","gridX","gridY","gridZ","threeScene","PI","ObjectPicker","interactables","raycaster","mouse","onMouseMove","event","offsetX","window","innerWidth","offsetY","innerHeight","findIntersectedObject","setFromCamera","intersects","intersectObjects","children","i","find","intractable","id","object","length","pickedObject","selectedObjects","addEventListener","Upload","fileReader","handleFileRead","content","result","JSON","parse","type","accept","onChange","e","FileReader","onloadend","files","readAsText","handleFileChosen","clock","renderLoop","requestAnimationFrame","getDelta","document","title","round","render","resizeWindow","updateProjectionMatrix","setSize","init","antialias","setupRenderer","body","appendChild","RenderPass","OutlinePass","edgeStrength","EffectComposer","addPass","RenderScene","onClick","stringify","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e5beb45f.chunk.js","sourcesContent":["import { FC } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Camera } from \"./primatives/camera\";\r\nimport { OrbitCamera } from \"./primatives/orbit-camera\";\r\nimport { SolarSystemScene } from \"./scenes/solar-system/solar-system-scene\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\nimport { ObjectPicker } from \"./primatives/object-picker\";\r\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\r\nimport { Upload } from \"./upload\";\r\nimport { Button, ButtonGroup } from \"@chakra-ui/react\";\r\nimport { defaultPlanetConfig } from \"./config\";\r\n\r\nlet camera: Camera;\r\nlet scene: SolarSystemScene;\r\nlet renderer: THREE.WebGLRenderer;\r\n\r\nlet renderPass: RenderPass;\r\nlet outlinePass: OutlinePass;\r\nlet composer: EffectComposer;\r\n\r\nlet picker: ObjectPicker;\r\n\r\nlet clock = new THREE.Clock();\r\nlet deltaTime = 0;\r\n\r\nconst setupRenderer = () => {\r\n  let renderer: THREE.WebGLRenderer;\r\n  renderer = new THREE.WebGLRenderer({ antialias: true });\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  return renderer;\r\n};\r\n\r\n/**\r\n * Render loop called every frame, updates the scene and renders it.\r\n */\r\nconst renderLoop = () => {\r\n  requestAnimationFrame(renderLoop);\r\n  deltaTime = clock.getDelta();\r\n  //Probably a better way to do this\r\n  document.title = `FPS: ${Math.round(1 / deltaTime)}`;\r\n\r\n  camera.targetObject(picker.findIntersectedObject()?.threeObject.position);\r\n\r\n  picker.update(outlinePass, deltaTime);\r\n  scene.update(deltaTime);\r\n  camera.update(deltaTime);\r\n\r\n  composer.render(deltaTime);\r\n};\r\n\r\nconst resizeWindow = () => {\r\n  camera.threeCamera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.threeCamera.updateProjectionMatrix();\r\n\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n};\r\n\r\nconst init = (useCustomConfig: boolean) => {\r\n  scene = new SolarSystemScene({\r\n    enableGridX: false,\r\n    enableGridY: false,\r\n    enableGridZ: true,\r\n    useCustomConfig,\r\n  });\r\n  renderer = setupRenderer();\r\n  camera = new OrbitCamera({\r\n    fov: 90,\r\n    aspect: window.innerWidth / window.innerHeight,\r\n    near: 0.1,\r\n    far: 10000000,\r\n    position: new THREE.Vector3(-700, 5000, 4000),\r\n    target: new THREE.Vector3(0, 0, -500),\r\n    domElement: renderer.domElement,\r\n  });\r\n  picker = new ObjectPicker({\r\n    camera: camera.threeCamera,\r\n    scene: scene.threeScene,\r\n    interactables: scene.planets,\r\n  });\r\n\r\n  document.body.appendChild(renderer.domElement);\r\n  window.addEventListener(\"resize\", resizeWindow, false);\r\n\r\n  renderPass = new RenderPass(scene.threeScene, camera.threeCamera);\r\n  outlinePass = new OutlinePass(\r\n    new THREE.Vector2(window.innerWidth, window.innerHeight),\r\n    scene.threeScene,\r\n    camera.threeCamera\r\n  );\r\n  outlinePass.edgeStrength = 250;\r\n\r\n  composer = new EffectComposer(renderer);\r\n  composer.addPass(renderPass);\r\n  composer.addPass(outlinePass);\r\n\r\n  renderLoop();\r\n};\r\n\r\nexport const RenderScene: FC = () => {\r\n  return (\r\n    <>\r\n      <Upload />\r\n      <ButtonGroup>\r\n        <Button onClick={(e) => init(true)}>START CUSTOM SCENE</Button>\r\n        <Button onClick={(e) => init(false)}>START DEFAULT SCENE</Button>\r\n        <Button\r\n          onClick={(e) => console.log(JSON.stringify(defaultPlanetConfig))}\r\n        >\r\n          LOG DEFAULT SCENE\r\n        </Button>\r\n      </ButtonGroup>\r\n    </>\r\n  );\r\n};\r\n","import * as THREE from \"three\";\r\n\r\nexport interface CameraParams {\r\n  fov: number;\r\n  aspect: number;\r\n  near: number;\r\n  far: number;\r\n  position: THREE.Vector3;\r\n}\r\n\r\nexport class Camera {\r\n  threeCamera: THREE.PerspectiveCamera;\r\n\r\n  constructor({ fov, aspect, near, far, position }: CameraParams) {\r\n    this.threeCamera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n    this.threeCamera.position.copy(position);\r\n  }\r\n\r\n  targetObject = (target?: THREE.Vector3) => {};\r\n\r\n  /**\r\n   * Updates object parameters, typically called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {};\r\n}\r\n","import * as THREE from \"three\";\r\nimport { Camera, CameraParams } from \"./camera\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport interface OrbitCameraParams extends CameraParams {\r\n  domElement?: HTMLElement | undefined;\r\n  target: THREE.Vector3;\r\n}\r\n\r\n/**\r\n * Orbit camera allows for rotating around a given target.\r\n */\r\nexport class OrbitCamera extends Camera {\r\n  domElement?: HTMLElement | undefined;\r\n  controls: OrbitControls;\r\n  target: THREE.Vector3;\r\n\r\n  zoomSpeed: number = 2;\r\n  rotateSpeed: number = 2;\r\n  panSpeed: number = 2;\r\n\r\n  constructor({\r\n    fov,\r\n    aspect,\r\n    near,\r\n    far,\r\n    position,\r\n    target,\r\n    domElement,\r\n  }: OrbitCameraParams) {\r\n    super({ fov, aspect, near, far, position });\r\n    this.domElement = domElement;\r\n    this.target = target;\r\n\r\n    this.threeCamera.lookAt(target);\r\n    this.controls = new OrbitControls(this.threeCamera, this.domElement);\r\n    // orbit camera requires a target\r\n    this.controls.target.copy(target);\r\n\r\n    this.controls.zoomSpeed = this.zoomSpeed;\r\n    this.controls.rotateSpeed = this.rotateSpeed;\r\n    this.controls.panSpeed = this.panSpeed;\r\n\r\n    this.controls.update();\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.controls.update();\r\n    this.controls.target.copy(this.target);\r\n  };\r\n\r\n  targetObject = (target?: THREE.Vector3) => {\r\n    this.target.copy(target || this.target);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\r\n\r\nexport interface TrailParams {\r\n  trailLength: number;\r\n  colour: THREE.Color;\r\n}\r\n\r\n/**\r\n * Renders a trails, points are added dynamically to the trail.\r\n */\r\nexport class Trail {\r\n  trailObject: THREE.InstancedMesh;\r\n  geometry: THREE.BufferGeometry;\r\n  material: THREE.Material;\r\n\r\n  positions: THREE.Vector3[];\r\n  counter: number;\r\n  trailLength: number;\r\n\r\n  constructor({ trailLength, colour }: TrailParams) {\r\n    this.trailLength = trailLength;\r\n    this.counter = 0;\r\n    this.positions = new Array<THREE.Vector3>(this.trailLength);\r\n    this.positions.fill(new THREE.Vector3(0, 0, 0));\r\n\r\n    this.material = new THREE.MeshBasicMaterial({\r\n      color: colour,\r\n      //wireframe: true,\r\n    });\r\n    this.geometry = new THREE.SphereGeometry(7, 5, 5);\r\n\r\n    this.trailObject = new THREE.InstancedMesh(\r\n      this.geometry,\r\n      this.material,\r\n      this.trailLength\r\n    );\r\n\r\n    this.trailObject.instanceMatrix.needsUpdate = true;\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    //console.log(this.points);\r\n  };\r\n\r\n  /**\r\n   * Since the trail is a line of type BufferGeometry whose size cannot be changed,\r\n   * we instead have a fixed length trail where old points are removed and new points are added.\r\n   * @param point\r\n   */\r\n  addPoint = (point: THREE.Vector3) => {\r\n    let mappedIndex = this.counter++;\r\n    let dummy = new THREE.Object3D();\r\n    dummy.position.copy(point);\r\n    dummy.updateMatrix();\r\n    this.trailObject.setMatrixAt(mappedIndex, dummy.matrix);\r\n    this.counter %= this.trailLength;\r\n    this.trailObject.instanceMatrix.needsUpdate = true;\r\n    //console.log(mappedIndex);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\r\nimport { Renderable, RenderableParams } from \"../../primatives/renderable\";\r\nimport { Trail } from \"../../primatives/trail\";\r\n\r\nexport interface PlanetParams\r\n  extends Omit<RenderableParams, \"geometry\" | \"material\"> {\r\n  mass: number;\r\n  radius: number;\r\n  colour: THREE.Color;\r\n  position: THREE.Vector3;\r\n  initialVelocity: THREE.Vector3;\r\n}\r\n\r\nexport class Planet extends Renderable {\r\n  mass: number;\r\n  radius: number;\r\n  colour: THREE.Color;\r\n\r\n  initialVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\r\n  currentVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\r\n\r\n  gravitationalConstant: number = 6.67408e-11;\r\n\r\n  trail: Trail;\r\n\r\n  frameCount: number = 0;\r\n  frameUpdate: number = 75;\r\n\r\n  constructor({\r\n    position,\r\n    name,\r\n    mass,\r\n    radius,\r\n    colour,\r\n    initialVelocity,\r\n    scene,\r\n  }: PlanetParams) {\r\n    super({\r\n      geometry: new THREE.SphereGeometry(radius, 32, 32),\r\n      material: new THREE.MeshBasicMaterial({ color: colour, wireframe: true }),\r\n      scene,\r\n      name,\r\n    });\r\n    this.mass = mass;\r\n    this.radius = radius;\r\n    this.colour = colour;\r\n\r\n    this.threeObject.position.copy(position);\r\n    this.initialVelocity = initialVelocity;\r\n    this.currentVelocity = this.initialVelocity;\r\n\r\n    this.trail = new Trail({ trailLength: 100, colour: this.colour });\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.frameCount++;\r\n    this.threeObject.rotateY(deltaTime * 0.1);\r\n    this.threeObject.position.add(this.currentVelocity);\r\n\r\n    // call update every value of frameUpdate\r\n    if (this.frameCount === this.frameUpdate)\r\n      this.trail.addPoint(this.threeObject.position);\r\n\r\n    this.frameCount %= this.frameUpdate;\r\n  };\r\n\r\n  updateVelocity = (planets: Planet[], deltaTime: number) => {\r\n    //console.log(\"update planet velocity\");\r\n    planets.forEach((planet) => {\r\n      if (planet !== this) {\r\n        let distance = this.threeObject.position.distanceTo(\r\n          planet.threeObject.position\r\n        );\r\n        //multiply by -1 otherwise the planets will be moving away from each other\r\n        let forceDir: THREE.Vector3 = this.threeObject.position\r\n          .clone()\r\n          .sub(planet.threeObject.position)\r\n          .normalize()\r\n          .multiplyScalar(-1);\r\n        let force: THREE.Vector3 = forceDir.multiplyScalar(\r\n          (this.gravitationalConstant * this.mass * planet.mass) /\r\n            Math.pow(distance, 2)\r\n        );\r\n\r\n        let acceleration: THREE.Vector3 = force.divideScalar(this.mass);\r\n        this.currentVelocity.add(acceleration.multiplyScalar(deltaTime));\r\n      }\r\n    });\r\n  };\r\n\r\n  turnOnTrails = () => {\r\n    this.threeParentScene.add(this.trail.trailObject);\r\n  };\r\n\r\n  turnOffTrails = () => {\r\n    this.threeParentScene.remove(this.trail.trailObject);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\r\n\r\nexport interface RenderableParams {\r\n  geometry: THREE.BufferGeometry;\r\n  material: THREE.Material;\r\n  name: string;\r\n  scene: THREE.Scene;\r\n}\r\nexport class Renderable {\r\n  threeObject: THREE.Object3D;\r\n  threeParentScene: THREE.Scene;\r\n\r\n  geometry: THREE.BufferGeometry;\r\n  material: THREE.Material;\r\n  name: string;\r\n\r\n  constructor({ geometry, material, scene, name }: RenderableParams) {\r\n    this.geometry = geometry;\r\n    this.material = material;\r\n    this.name = name;\r\n    this.threeParentScene = scene;\r\n    this.threeObject = new THREE.Mesh(this.geometry, this.material);\r\n\r\n    // every renderable now has a parent scene, it need to add itself to the scene\r\n    this.threeParentScene.add(this.threeObject);\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.threeObject.rotateX(deltaTime * 1);\r\n    this.threeObject.rotateY(deltaTime * 1);\r\n    this.threeObject.rotateZ(deltaTime * 1);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\r\nimport { Planet } from \"./scenes/solar-system/planet\";\r\n\r\nexport interface PlanetUploadProps {\r\n  name: string;\r\n  mass: number;\r\n  radius: number;\r\n  colour: string | number;\r\n  position: { x: number; y: number; z: number };\r\n  initialVelocity: { x: number; y: number; z: number };\r\n}\r\n\r\nexport let customPlanetConfig: PlanetUploadProps[] = [];\r\n\r\nexport const defaultPlanetConfig: PlanetUploadProps[] = [\r\n  {\r\n    name: \"Sun\",\r\n    mass: 1.25e16,\r\n    radius: 796.34,\r\n    colour: 0xfff00,\r\n    position: { x: 0, y: 0, z: -500 },\r\n    initialVelocity: { x: 0, y: 0, z: 0 },\r\n  },\r\n  {\r\n    name: \"Earth\",\r\n    mass: 1.0e15,\r\n    radius: 63.71,\r\n    colour: 0x0000ff,\r\n    position: { x: 5000, y: 0, z: -500 },\r\n    initialVelocity: { x: 0, y: 0, z: -0.75 },\r\n  },\r\n  {\r\n    name: \"Moon\",\r\n    mass: 1.0e3,\r\n    radius: 17.37,\r\n    colour: 0xcccccc,\r\n    position: { x: 5384, y: 0, z: -500 },\r\n    initialVelocity: { x: 0, y: -1, z: -0.75 },\r\n  },\r\n  {\r\n    name: \"Mars\",\r\n    mass: 1.0e15,\r\n    radius: 63.71,\r\n    colour: 0xcc0000,\r\n    position: { x: -5000, y: 0, z: -500 },\r\n    initialVelocity: { x: 0, y: 0, z: 0.75 },\r\n  },\r\n  {\r\n    name: \"Deimos\",\r\n    mass: 1.0e3,\r\n    radius: 17.37,\r\n    colour: 0xcccccc,\r\n    position: { x: -5384, y: 0, z: -500 },\r\n    initialVelocity: { x: 0, y: 1, z: 0.75 },\r\n  },\r\n];\r\n\r\nexport const importPlanetConfig = (\r\n  planetProps: PlanetUploadProps[],\r\n  scene: THREE.Scene\r\n): Planet[] => {\r\n  let planets: Planet[] = [];\r\n\r\n  console.log(planetProps);\r\n  planetProps.forEach((currPlanet) => {\r\n    let newPlanet = new Planet({\r\n      name: currPlanet.name,\r\n      mass: currPlanet.mass,\r\n      radius: currPlanet.radius,\r\n      colour: new THREE.Color(currPlanet.colour),\r\n      position: new THREE.Vector3(\r\n        currPlanet.position.x,\r\n        currPlanet.position.y,\r\n        currPlanet.position.z\r\n      ),\r\n      initialVelocity: new THREE.Vector3(\r\n        currPlanet.initialVelocity.x,\r\n        currPlanet.initialVelocity.y,\r\n        currPlanet.initialVelocity.z\r\n      ),\r\n      scene,\r\n    });\r\n\r\n    planets.push(newPlanet);\r\n  });\r\n\r\n  return planets;\r\n};\r\n","import * as THREE from \"three\";\r\nimport {\r\n  customPlanetConfig,\r\n  defaultPlanetConfig,\r\n  importPlanetConfig,\r\n} from \"../../config\";\r\nimport { Scene } from \"../../primatives/scene\";\r\nimport { Planet } from \"./planet\";\r\n\r\nexport interface SolarSystemSceneParams {\r\n  enableGridX: boolean;\r\n  enableGridY: boolean;\r\n  enableGridZ: boolean;\r\n  useCustomConfig: boolean;\r\n}\r\nexport class SolarSystemScene extends Scene {\r\n  gridSize = 1.0e5;\r\n  gridDivisions = 3.0e2;\r\n  gridColour = new THREE.Color(0x666666);\r\n\r\n  gridX = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n  gridY = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n  gridZ = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n\r\n  planets: Planet[];\r\n\r\n  constructor({\r\n    enableGridX,\r\n    enableGridY,\r\n    enableGridZ,\r\n    useCustomConfig,\r\n  }: SolarSystemSceneParams) {\r\n    super();\r\n\r\n    if (useCustomConfig) {\r\n      //console.log(customPlanetConfig);\r\n      //console.log(defaultPlanetConfig);\r\n      this.planets = importPlanetConfig(customPlanetConfig, this.threeScene);\r\n    } else\r\n      this.planets = importPlanetConfig(defaultPlanetConfig, this.threeScene);\r\n\r\n    // setup grid\r\n    if (enableGridX) {\r\n      this.gridX.rotateZ(Math.PI / 2);\r\n      this.threeScene.add(this.gridX);\r\n    }\r\n\r\n    if (enableGridY) {\r\n      this.gridY.rotateX(Math.PI / 2);\r\n      this.threeScene.add(this.gridY);\r\n    }\r\n\r\n    if (enableGridZ) {\r\n      this.threeScene.add(this.gridZ);\r\n    }\r\n\r\n    // turn on trails for visualisation of movement\r\n    this.planets.forEach((planet) => {\r\n      planet.turnOnTrails();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.planets.forEach((planet) => {\r\n      planet.updateVelocity(this.planets, deltaTime);\r\n      planet.update(deltaTime);\r\n    });\r\n  };\r\n}\r\n","import * as THREE from \"three\";\r\n\r\nexport class Scene {\r\n  threeScene: THREE.Scene;\r\n\r\n  constructor() {\r\n    this.threeScene = new THREE.Scene();\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    //console.log(\"update scene\");\r\n  };\r\n}\r\n","import * as THREE from \"three\";\r\nimport { Renderable } from \"./renderable\";\r\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\r\n\r\nexport interface MouseHandlerParams {\r\n  camera: THREE.Camera;\r\n  scene: THREE.Scene;\r\n  interactables: Renderable[];\r\n}\r\n\r\nexport class ObjectPicker {\r\n  raycaster = new THREE.Raycaster();\r\n  mouse = new THREE.Vector2();\r\n\r\n  camera: THREE.Camera;\r\n  scene: THREE.Scene;\r\n  interactables: Renderable[];\r\n\r\n  constructor({ camera, scene, interactables }: MouseHandlerParams) {\r\n    this.camera = camera;\r\n    this.scene = scene;\r\n    this.interactables = interactables;\r\n    window.addEventListener(\"mousemove\", this.onMouseMove, false);\r\n  }\r\n\r\n  onMouseMove = (event: MouseEvent) => {\r\n    this.mouse.x = (event.offsetX / window.innerWidth) * 2 - 1;\r\n    this.mouse.y = -(event.offsetY / window.innerHeight) * 2 + 1;\r\n  };\r\n\r\n  findIntersectedObject = (): Renderable | undefined => {\r\n    let intersectedObject: Renderable | undefined;\r\n    // update the picking ray with the camera and mouse position\r\n    this.raycaster.setFromCamera(this.mouse, this.camera);\r\n\r\n    // calculate objects intersecting the picking ray\r\n    const intersects = this.raycaster.intersectObjects(this.scene.children);\r\n    for (let i = 0; i < intersects.length; i++) {\r\n      intersectedObject = this.interactables.find(\r\n        (intractable) => intractable.threeObject.id === intersects[i].object.id\r\n      );\r\n\r\n      return intersectedObject;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Updates object parameters, typically called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (outlinePass: OutlinePass, deltaTime: number) => {\r\n    //console.log(\"mouse update\");\r\n    let pickedObject = this.findIntersectedObject();\r\n    if (pickedObject) {\r\n      outlinePass.selectedObjects = [pickedObject.threeObject];\r\n    }\r\n  };\r\n}\r\n","import { ChangeEvent, FC } from \"react\";\r\nimport { Input, Text } from \"@chakra-ui/react\";\r\nimport { customPlanetConfig, PlanetUploadProps } from \"./config\";\r\n\r\nexport const Upload: FC = () => {\r\n  let fileReader: FileReader;\r\n\r\n  const handleFileRead = () => {\r\n    const content = fileReader.result;\r\n    const contentAsJson = JSON.parse(content as string);\r\n    contentAsJson.forEach((planetProps: PlanetUploadProps) => {\r\n      customPlanetConfig.push(planetProps);\r\n    });\r\n  };\r\n\r\n  const handleFileChosen = (e: ChangeEvent<HTMLInputElement>) => {\r\n    fileReader = new FileReader();\r\n    fileReader.onloadend = handleFileRead;\r\n    if (e.target.files) fileReader.readAsText(e.target.files[0]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text>Upload JSON config file</Text>\r\n      <Input type=\"file\" accept=\".json\" onChange={(e) => handleFileChosen(e)} />\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RenderScene } from \"./renderer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RenderScene />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}