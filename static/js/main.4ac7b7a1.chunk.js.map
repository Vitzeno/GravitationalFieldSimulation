{"version":3,"sources":["renderer.tsx","primatives/camera.tsx","primatives/orbit-camera.tsx","primatives/scene.tsx","primatives/trail.tsx","scenes/solar-system/planet.tsx","primatives/renderable.tsx","scenes/solar-system/solar-system-scene.tsx","index.tsx"],"names":["camera","scene","renderer","composer","Camera","fov","aspect","near","far","position","threeCamera","update","deltaTime","this","THREE","copy","OrbitCamera","target","domElement","controls","zoomSpeed","rotateSpeed","panSpeed","lookAt","OrbitControls","Scene","threeScene","Trail","trailLength","colour","trailObject","geometry","material","positions","counter","addPoint","point","mappedIndex","dummy","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","Array","fill","color","Planet","name","mass","radius","initialVelocity","wireframe","currentVelocity","gravitationalConstant","trail","frameCount","frameUpdate","threeObject","rotateY","add","updateVelocity","planets","forEach","planet","distance","distanceTo","acceleration","clone","sub","normalize","multiplyScalar","Math","pow","divideScalar","turnOnTrails","threeParentScene","turnOffTrails","remove","rotateX","rotateZ","SolarSystemScene","enableGridX","enableGridY","enableGridZ","gridSize","gridDivisions","gridColour","gridX","gridY","gridZ","object","PI","clock","renderLoop","requestAnimationFrame","getDelta","document","title","render","resizeWindow","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","init","antialias","setupRenderer","body","appendChild","addEventListener","renderPass","RenderPass","EffectComposer","addPass","RenderScene","useEffect","ReactDOM","StrictMode","getElementById"],"mappings":"0GAYIA,EACAC,EACAC,EACAC,E,6DCLSC,EAGX,cAAiE,IAAnDC,EAAkD,EAAlDA,IAAKC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,SAA0B,yBAFhEC,iBAEgE,OAUhEC,OAAS,SAACC,KATRC,KAAKH,YAAc,IAAII,IAAwBT,EAAKC,EAAQC,EAAMC,GAClEK,KAAKH,YAAYD,SAASM,KAAKN,I,QCHtBO,EAAb,kDASE,cAQuB,IAAD,EAPpBX,EAOoB,EAPpBA,IACAC,EAMoB,EANpBA,OACAC,EAKoB,EALpBA,KACAC,EAIoB,EAJpBA,IACAC,EAGoB,EAHpBA,SACAQ,EAEoB,EAFpBA,OACAC,EACoB,EADpBA,WACoB,4BACpB,cAAM,CAAEb,MAAKC,SAAQC,OAAMC,MAAKC,cAjBlCS,gBAgBsB,IAftBC,cAesB,IAdtBF,YAcsB,IAZtBG,UAAoB,EAYE,EAXtBC,YAAsB,EAWA,EAVtBC,SAAmB,EAUG,EAsBtBX,OAAS,SAACC,GACR,EAAKO,SAASR,UArBd,EAAKO,WAAaA,EAClB,EAAKD,OAASA,EAEd,EAAKP,YAAYa,OAAON,GACxB,EAAKE,SAAW,IAAIK,IAAc,EAAKd,YAAa,EAAKQ,YAEzD,EAAKC,SAASF,OAAOF,KAAKE,GAE1B,EAAKE,SAASC,UAAY,EAAKA,UAC/B,EAAKD,SAASE,YAAc,EAAKA,YACjC,EAAKF,SAASG,SAAW,EAAKA,SAE9B,EAAKH,SAASR,SAdM,EAjBxB,UAAiCP,GCVpBqB,EAGX,aAAe,yBAFfC,gBAEc,OASdf,OAAS,SAACC,KARRC,KAAKa,WAAa,IAAIZ,K,OCIba,EASX,cAAmD,IAAD,OAApCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,OAAuB,yBARlDC,iBAQkD,OAPlDC,cAOkD,OANlDC,cAMkD,OAJlDC,eAIkD,OAHlDC,aAGkD,OAFlDN,iBAEkD,OA0BlDjB,OAAS,SAACC,KA1BwC,KAmClDuB,SAAW,SAACC,GACV,IAAIC,EAAc,EAAKH,UACnBI,EAAQ,IAAIxB,IAChBwB,EAAM7B,SAASM,KAAKqB,GACpBE,EAAMC,eACN,EAAKT,YAAYU,YAAYH,EAAaC,EAAMG,QAChD,EAAKP,SAAW,EAAKN,YACrB,EAAKE,YAAYY,eAAeC,aAAc,GAzC9C9B,KAAKe,YAAcA,EACnBf,KAAKqB,QAAU,EACfrB,KAAKoB,UAAY,IAAIW,MAAqB/B,KAAKe,aAC/Cf,KAAKoB,UAAUY,KAAK,IAAI/B,IAAc,EAAG,EAAG,IAE5CD,KAAKmB,SAAW,IAAIlB,IAAwB,CAC1CgC,MAAOjB,IAGThB,KAAKkB,SAAW,IAAIjB,IAAqB,EAAG,EAAG,GAE/CD,KAAKiB,YAAc,IAAIhB,IACrBD,KAAKkB,SACLlB,KAAKmB,SACLnB,KAAKe,aAGPf,KAAKiB,YAAYY,eAAeC,aAAc,GCvBrCI,EAAb,kDAgBE,cAQkB,IAAD,EAPftC,EAOe,EAPfA,SACAuC,EAMe,EANfA,KACAC,EAKe,EALfA,KACAC,EAIe,EAJfA,OACArB,EAGe,EAHfA,OACAsB,EAEe,EAFfA,gBACAlD,EACe,EADfA,MACe,4BACf,cAAM,CACJ8B,SAAU,IAAIjB,IAAqBoC,EAAQ,GAAI,IAC/ClB,SAAU,IAAIlB,IAAwB,CAAEgC,MAAOjB,EAAQuB,WAAW,IAClEnD,WA3BJ+C,UAuBiB,IAtBjBC,UAsBiB,IArBjBC,YAqBiB,IApBjBrB,YAoBiB,IAlBjBsB,gBAAiC,IAAIrC,IAAc,EAAG,EAAG,GAkBxC,EAjBjBuC,gBAAiC,IAAIvC,IAAc,EAAG,EAAG,GAiBxC,EAfjBwC,sBAAgC,WAef,EAbjBC,WAaiB,IAXjBC,WAAqB,EAWJ,EAVjBC,YAAsB,GAUL,EAuBjB9C,OAAS,SAACC,GACR,EAAK4C,aACL,EAAKE,YAAYC,QAAoB,GAAZ/C,GACzB,EAAK8C,YAAYjD,SAASmD,IAAI,EAAKP,iBAG/B,EAAKG,aAAe,EAAKC,aAC3B,EAAKF,MAAMpB,SAAS,EAAKuB,YAAYjD,UAEvC,EAAK+C,YAAc,EAAKC,aAhCT,EAmCjBI,eAAiB,SAACC,EAAmBlD,GAEnCkD,EAAQC,SAAQ,SAACC,GACf,GAAIA,IAAM,eAAW,CACnB,IAAIC,EAAW,EAAKP,YAAYjD,SAASyD,WACvCF,EAAON,YAAYjD,UAajB0D,EAV0B,EAAKT,YAAYjD,SAC5C2D,QACAC,IAAIL,EAAON,YAAYjD,UACvB6D,YACAC,gBAAgB,GACiBA,eACjC,EAAKjB,sBAAwB,EAAKL,KAAOe,EAAOf,KAC/CuB,KAAKC,IAAIR,EAAU,IAGiBS,aAAa,EAAKzB,MAC1D,EAAKI,gBAAgBO,IAAIO,EAAaI,eAAe3D,SAtD1C,EA2DjB+D,aAAe,WACb,EAAKC,iBAAiBhB,IAAI,EAAKL,MAAMzB,cA5DtB,EA+DjB+C,cAAgB,WACd,EAAKD,iBAAiBE,OAAO,EAAKvB,MAAMzB,cA1DxC,EAAKkB,KAAOA,EACZ,EAAKC,KAAOA,EACZ,EAAKC,OAASA,EACd,EAAKrB,OAASA,EAEd,EAAK6B,YAAYjD,SAASM,KAAKN,GAC/B,EAAK0C,gBAAkBA,EACvB,EAAKE,gBAAkB,EAAKF,gBAE5B,EAAKI,MAAQ,IAAI5B,EAAM,CAAEC,YAAa,IAAKC,OAAQ,EAAKA,SAfzC,EAxBnB,WCAE,cAA8D,IAAD,OAA/CE,EAA+C,EAA/CA,SAAUC,EAAqC,EAArCA,SAAU/B,EAA2B,EAA3BA,MAA2B,yBAN7DyD,iBAM6D,OAL7DkB,sBAK6D,OAH7D7C,cAG6D,OAF7DC,cAE6D,OAe7DrB,OAAS,SAACC,GACR,EAAK8C,YAAYqB,QAAoB,EAAZnE,GACzB,EAAK8C,YAAYC,QAAoB,EAAZ/C,GACzB,EAAK8C,YAAYsB,QAAoB,EAAZpE,IAjBzBC,KAAKkB,SAAWA,EAChBlB,KAAKmB,SAAWA,EAChBnB,KAAK+D,iBAAmB3E,EACxBY,KAAK6C,YAAc,IAAI5C,IAAWD,KAAKkB,SAAUlB,KAAKmB,UAGtDnB,KAAK+D,iBAAiBhB,IAAI/C,KAAK6C,gBCZtBuB,EAAb,kDAyDE,cAI4B,IAAD,EAHzBC,EAGyB,EAHzBA,YACAC,EAEyB,EAFzBA,YACAC,EACyB,EADzBA,YACyB,4BACzB,gBA7DFC,SAAW,IA4DgB,EA3D3BC,cAAgB,IA2DW,EA1D3BC,WAAa,IAAIzE,IAAY,SA0DF,EAxD3B0E,MAAQ,IAAI1E,IACV,EAAKuE,SACL,EAAKC,cACL,EAAKC,WACL,EAAKA,YAoDoB,EAlD3BE,MAAQ,IAAI3E,IACV,EAAKuE,SACL,EAAKC,cACL,EAAKC,WACL,EAAKA,YA8CoB,EA5C3BG,MAAQ,IAAI5E,IACV,EAAKuE,SACL,EAAKC,cACL,EAAKC,WACL,EAAKA,YAwCoB,EArC3BzB,QAAoB,CAElB,IAAIf,EAAO,CACTC,KAAM,MACNC,KAAM,OACNC,OAAQ,OACRrB,OAAQ,IAAIf,IAAY,SACxBL,SAAU,IAAIK,IAAc,EAAG,GAAI,KACnCqC,gBAAiB,IAAIrC,IAAc,EAAG,EAAG,GACzCb,MAAO,EAAKyB,aAGd,IAAIqB,EAAO,CACTC,KAAM,QACNC,KAAM,KACNC,OAAQ,MACRrB,OAAQ,IAAIf,IAAY,KACxBL,SAAU,IAAIK,IAAc,IAAM,GAAI,KACtCqC,gBAAiB,IAAIrC,IAAc,EAAG,GAAI,KAC1Cb,MAAO,EAAKyB,aAGd,IAAIqB,EAAO,CACTC,KAAM,OACNC,KAAM,IACNC,OAAQ,MACRrB,OAAQ,IAAIf,IAAY,UACxBL,SAAU,IAAIK,IAAc,KAAM,GAAI,KACtCqC,gBAAiB,IAAIrC,IAAc,GAAI,GAAI,KAC3Cb,MAAO,EAAKyB,cAQW,EA4B3Bf,OAAS,SAACC,GACR,EAAKkD,QAAQC,SAAQ,SAAC4B,GACpBA,EAAO9B,eAAe,EAAKC,QAASlD,OA3BlCsE,IACF,EAAKM,MAAMR,QAAQR,KAAKoB,GAAK,GAC7B,EAAKlE,WAAWkC,IAAI,EAAK4B,QAGvBL,IACF,EAAKM,MAAMV,QAAQP,KAAKoB,GAAK,GAC7B,EAAKlE,WAAWkC,IAAI,EAAK6B,QAGvBL,GACF,EAAK1D,WAAWkC,IAAI,EAAK8B,OAI3B,EAAK5B,QAAQC,SAAQ,SAACC,GACpBA,EAAOW,kBAnBgB,EA7D7B,UAAsClD,G,uBPQlCoE,EAAQ,IAAI/E,IACZF,EAAY,EAaVkF,EAAa,SAAbA,IACJC,sBAAsBD,GACtBlF,EAAYiF,EAAMG,WAElBC,SAASC,MAAT,eAAyB,EAAItF,GAE7BX,EAAMU,OAAOC,GACbX,EAAM6D,QAAQC,SAAQ,SAAC4B,GAAD,OAAYA,EAAOhF,OAAOC,MAChDZ,EAAOW,OAAOC,GAEdT,EAASgG,OAAOvF,IAIZwF,EAAe,WACnBpG,EAAOU,YAAYJ,OAAS+F,OAAOC,WAAaD,OAAOE,YACvDvG,EAAOU,YAAY8F,yBAEnBtG,EAASuG,QAAQJ,OAAOC,WAAYD,OAAOE,cAGvCG,EAAO,WACXzG,EAAQ,IAAIgF,EAAiB,CAC3BC,aAAa,EACbC,aAAa,EACbC,aAAa,IAEflF,EAtCoB,WACpB,IAAIA,EAIJ,OAHAA,EAAW,IAAIY,IAAoB,CAAE6F,WAAW,KACvCF,QAAQJ,OAAOC,WAAYD,OAAOE,aAEpCrG,EAiCI0G,GACX5G,EAAS,IAAIgB,EAAY,CACvBX,IAAK,GACLC,OAAQ+F,OAAOC,WAAaD,OAAOE,YACnChG,KAAM,GACNC,IAAK,IACLC,SAAU,IAAIK,KAAe,IAAK,IAAM,KACxCG,OAAQ,IAAIH,IAAc,EAAG,GAAI,KACjCI,WAAYhB,EAASgB,aAGvB+E,SAASY,KAAKC,YAAY5G,EAASgB,YACnCmF,OAAOU,iBAAiB,SAAUX,GAAc,GAEhD,IAAIY,EAAa,IAAIC,IAAWhH,EAAMyB,WAAY1B,EAAOU,cACzDP,EAAW,IAAI+G,IAAehH,IACrBiH,QAAQH,GAEjBlB,KAGWsB,EAAyB,SAAC,GAAa,EAAXpE,KAKvC,OAJAqE,qBAAU,WACRX,OAGK,8BQhFTY,IAASnB,OACP,cAAC,IAAMoB,WAAP,UACE,cAAC,EAAD,CAAavE,KAAK,YAEpBiD,SAASuB,eAAe,W","file":"static/js/main.4ac7b7a1.chunk.js","sourcesContent":["import { FC, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { Camera } from \"./primatives/camera\";\r\nimport { OrbitCamera } from \"./primatives/orbit-camera\";\r\nimport { SolarSystemScene } from \"./scenes/solar-system/solar-system-scene\";\r\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\n\r\ninterface Props {\r\n  name: string;\r\n}\r\n\r\nlet camera: Camera;\r\nlet scene: SolarSystemScene;\r\nlet renderer: THREE.WebGLRenderer;\r\nlet composer: EffectComposer;\r\n\r\nlet clock = new THREE.Clock();\r\nlet deltaTime = 0;\r\n\r\nconst setupRenderer = () => {\r\n  let renderer: THREE.WebGLRenderer;\r\n  renderer = new THREE.WebGLRenderer({ antialias: true });\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  return renderer;\r\n};\r\n\r\n/**\r\n * Render loop called every frame, updates the scene and renders it.\r\n */\r\nconst renderLoop = () => {\r\n  requestAnimationFrame(renderLoop);\r\n  deltaTime = clock.getDelta();\r\n  //Probably a better way to do this\r\n  document.title = `FPS: ${1 / deltaTime}`;\r\n\r\n  scene.update(deltaTime);\r\n  scene.planets.forEach((object) => object.update(deltaTime));\r\n  camera.update(deltaTime);\r\n\r\n  composer.render(deltaTime);\r\n  //renderer.render(scene.threeScene, camera.threeCamera);\r\n};\r\n\r\nconst resizeWindow = () => {\r\n  camera.threeCamera.aspect = window.innerWidth / window.innerHeight;\r\n  camera.threeCamera.updateProjectionMatrix();\r\n\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n};\r\n\r\nconst init = () => {\r\n  scene = new SolarSystemScene({\r\n    enableGridX: false,\r\n    enableGridY: false,\r\n    enableGridZ: true,\r\n  });\r\n  renderer = setupRenderer();\r\n  camera = new OrbitCamera({\r\n    fov: 90,\r\n    aspect: window.innerWidth / window.innerHeight,\r\n    near: 0.1,\r\n    far: 10000000,\r\n    position: new THREE.Vector3(-700, 2000, 900),\r\n    target: new THREE.Vector3(0, 0, -500),\r\n    domElement: renderer.domElement,\r\n  });\r\n\r\n  document.body.appendChild(renderer.domElement);\r\n  window.addEventListener(\"resize\", resizeWindow, false);\r\n\r\n  let renderPass = new RenderPass(scene.threeScene, camera.threeCamera);\r\n  composer = new EffectComposer(renderer);\r\n  composer.addPass(renderPass);\r\n\r\n  renderLoop();\r\n};\r\n\r\nexport const RenderScene: FC<Props> = ({ name }) => {\r\n  useEffect(() => {\r\n    init();\r\n  });\r\n\r\n  return <></>;\r\n};\r\n","import * as THREE from \"three\";\n\nexport interface CameraParams {\n  fov: number;\n  aspect: number;\n  near: number;\n  far: number;\n  position: THREE.Vector3;\n}\n\nexport class Camera {\n  threeCamera: THREE.PerspectiveCamera;\n\n  constructor({ fov, aspect, near, far, position }: CameraParams) {\n    this.threeCamera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    this.threeCamera.position.copy(position);\n  }\n\n  /**\n   * Updates object parameters, typically called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {};\n}\n","import * as THREE from \"three\";\r\nimport { Camera, CameraParams } from \"./camera\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nexport interface OrbitCameraParams extends CameraParams {\r\n  domElement?: HTMLElement | undefined;\r\n  target: THREE.Vector3;\r\n}\r\n\r\n/**\r\n * Orbit camera allows for rotating around a given target.\r\n */\r\nexport class OrbitCamera extends Camera {\r\n  domElement?: HTMLElement | undefined;\r\n  controls: OrbitControls;\r\n  target: THREE.Vector3;\r\n\r\n  zoomSpeed: number = 2;\r\n  rotateSpeed: number = 2;\r\n  panSpeed: number = 2;\r\n\r\n  constructor({\r\n    fov,\r\n    aspect,\r\n    near,\r\n    far,\r\n    position,\r\n    target,\r\n    domElement,\r\n  }: OrbitCameraParams) {\r\n    super({ fov, aspect, near, far, position });\r\n    this.domElement = domElement;\r\n    this.target = target;\r\n\r\n    this.threeCamera.lookAt(target);\r\n    this.controls = new OrbitControls(this.threeCamera, this.domElement);\r\n    // orbit camera requires a target\r\n    this.controls.target.copy(target);\r\n\r\n    this.controls.zoomSpeed = this.zoomSpeed;\r\n    this.controls.rotateSpeed = this.rotateSpeed;\r\n    this.controls.panSpeed = this.panSpeed;\r\n\r\n    this.controls.update();\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.controls.update();\r\n    //console.log(this.threeCamera.position);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\n\nexport class Scene {\n  threeScene: THREE.Scene;\n\n  constructor() {\n    this.threeScene = new THREE.Scene();\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    //console.log(\"update scene\");\n  };\n}\n","import * as THREE from \"three\";\r\n\r\nexport interface TrailParams {\r\n  trailLength: number;\r\n  colour: THREE.Color;\r\n}\r\n\r\n/**\r\n * Renders a trails, points are added dynamically to the trail.\r\n */\r\nexport class Trail {\r\n  trailObject: THREE.InstancedMesh;\r\n  geometry: THREE.BufferGeometry;\r\n  material: THREE.Material;\r\n\r\n  positions: THREE.Vector3[];\r\n  counter: number;\r\n  trailLength: number;\r\n\r\n  constructor({ trailLength, colour }: TrailParams) {\r\n    this.trailLength = trailLength;\r\n    this.counter = 0;\r\n    this.positions = new Array<THREE.Vector3>(this.trailLength);\r\n    this.positions.fill(new THREE.Vector3(0, 0, 0));\r\n\r\n    this.material = new THREE.MeshBasicMaterial({\r\n      color: colour,\r\n      //wireframe: true,\r\n    });\r\n    this.geometry = new THREE.SphereGeometry(7, 5, 5);\r\n\r\n    this.trailObject = new THREE.InstancedMesh(\r\n      this.geometry,\r\n      this.material,\r\n      this.trailLength\r\n    );\r\n\r\n    this.trailObject.instanceMatrix.needsUpdate = true;\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    //console.log(this.points);\r\n  };\r\n\r\n  /**\r\n   * Since the trail is a line of type BufferGeometry whose size cannot be changed,\r\n   * we instead have a fixed length trail where old points are removed and new points are added.\r\n   * @param point\r\n   */\r\n  addPoint = (point: THREE.Vector3) => {\r\n    let mappedIndex = this.counter++;\r\n    let dummy = new THREE.Object3D();\r\n    dummy.position.copy(point);\r\n    dummy.updateMatrix();\r\n    this.trailObject.setMatrixAt(mappedIndex, dummy.matrix);\r\n    this.counter %= this.trailLength;\r\n    this.trailObject.instanceMatrix.needsUpdate = true;\r\n    //console.log(mappedIndex);\r\n  };\r\n}\r\n","import * as THREE from \"three\";\nimport { Renderable, RenderableParams } from \"../../primatives/renderable\";\nimport { Trail } from \"../../primatives/trail\";\n\nexport interface PlanetParams\n  extends Omit<RenderableParams, \"geometry\" | \"material\"> {\n  name: string;\n  mass: number;\n  radius: number;\n  colour: THREE.Color;\n  position: THREE.Vector3;\n  initialVelocity: THREE.Vector3;\n}\n\nexport class Planet extends Renderable {\n  name: string;\n  mass: number;\n  radius: number;\n  colour: THREE.Color;\n\n  initialVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n  currentVelocity: THREE.Vector3 = new THREE.Vector3(0, 0, 0);\n\n  gravitationalConstant: number = 6.67408e-11;\n\n  trail: Trail;\n\n  frameCount: number = 0;\n  frameUpdate: number = 75;\n\n  constructor({\n    position,\n    name,\n    mass,\n    radius,\n    colour,\n    initialVelocity,\n    scene,\n  }: PlanetParams) {\n    super({\n      geometry: new THREE.SphereGeometry(radius, 32, 32),\n      material: new THREE.MeshBasicMaterial({ color: colour, wireframe: true }),\n      scene,\n    });\n    this.name = name;\n    this.mass = mass;\n    this.radius = radius;\n    this.colour = colour;\n\n    this.threeObject.position.copy(position);\n    this.initialVelocity = initialVelocity;\n    this.currentVelocity = this.initialVelocity;\n\n    this.trail = new Trail({ trailLength: 100, colour: this.colour });\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.frameCount++;\n    this.threeObject.rotateY(deltaTime * 0.1);\n    this.threeObject.position.add(this.currentVelocity);\n\n    // call update every value of frameUpdate\n    if (this.frameCount === this.frameUpdate)\n      this.trail.addPoint(this.threeObject.position);\n\n    this.frameCount %= this.frameUpdate;\n  };\n\n  updateVelocity = (planets: Planet[], deltaTime: number) => {\n    //console.log(\"update planet velocity\");\n    planets.forEach((planet) => {\n      if (planet !== this) {\n        let distance = this.threeObject.position.distanceTo(\n          planet.threeObject.position\n        );\n        //multiply by -1 otherwise the planets will be moving away from each other\n        let forceDir: THREE.Vector3 = this.threeObject.position\n          .clone()\n          .sub(planet.threeObject.position)\n          .normalize()\n          .multiplyScalar(-1);\n        let force: THREE.Vector3 = forceDir.multiplyScalar(\n          (this.gravitationalConstant * this.mass * planet.mass) /\n            Math.pow(distance, 2)\n        );\n\n        let acceleration: THREE.Vector3 = force.divideScalar(this.mass);\n        this.currentVelocity.add(acceleration.multiplyScalar(deltaTime));\n      }\n    });\n  };\n\n  turnOnTrails = () => {\n    this.threeParentScene.add(this.trail.trailObject);\n  };\n\n  turnOffTrails = () => {\n    this.threeParentScene.remove(this.trail.trailObject);\n  };\n}\n","import * as THREE from \"three\";\n\nexport interface RenderableParams {\n  geometry: THREE.BufferGeometry;\n  material: THREE.Material;\n  scene: THREE.Scene;\n}\nexport class Renderable {\n  threeObject: THREE.Object3D;\n  threeParentScene: THREE.Scene;\n\n  geometry: THREE.BufferGeometry;\n  material: THREE.Material;\n\n  constructor({ geometry, material, scene }: RenderableParams) {\n    this.geometry = geometry;\n    this.material = material;\n    this.threeParentScene = scene;\n    this.threeObject = new THREE.Mesh(this.geometry, this.material);\n\n    // every renderable now has a parent scene, it need to add itself to the scene\n    this.threeParentScene.add(this.threeObject);\n  }\n\n  /**\n   * Updates object parameters, typically called called every frame.\n   * Delta time used to compensate for inconsistent frame rates.\n   * @param {number} deltaTime - Time since last frame in seconds.\n   */\n  update = (deltaTime: number) => {\n    this.threeObject.rotateX(deltaTime * 1);\n    this.threeObject.rotateY(deltaTime * 1);\n    this.threeObject.rotateZ(deltaTime * 1);\n  };\n}\n","import * as THREE from \"three\";\r\nimport { Scene } from \"../../primatives/scene\";\r\nimport { Planet } from \"../../scenes/solar-system/planet\";\r\n\r\nexport interface SolarSystemSceneParams {\r\n  enableGridX: boolean;\r\n  enableGridY: boolean;\r\n  enableGridZ: boolean;\r\n}\r\nexport class SolarSystemScene extends Scene {\r\n  gridSize = 1.0e5;\r\n  gridDivisions = 3.0e2;\r\n  gridColour = new THREE.Color(0x666666);\r\n\r\n  gridX = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n  gridY = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n  gridZ = new THREE.GridHelper(\r\n    this.gridSize,\r\n    this.gridDivisions,\r\n    this.gridColour,\r\n    this.gridColour\r\n  );\r\n\r\n  planets: Planet[] = [\r\n    //Sun\r\n    new Planet({\r\n      name: \"Sun\",\r\n      mass: 1.25e16,\r\n      radius: 796.34,\r\n      colour: new THREE.Color(0xfff00),\r\n      position: new THREE.Vector3(0, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, 0, 0),\r\n      scene: this.threeScene,\r\n    }),\r\n    //Earth\r\n    new Planet({\r\n      name: \"Earth\",\r\n      mass: 1.0e15,\r\n      radius: 63.71,\r\n      colour: new THREE.Color(0x0000ff),\r\n      position: new THREE.Vector3(5000, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, 0, -0.75),\r\n      scene: this.threeScene,\r\n    }),\r\n    //Moon\r\n    new Planet({\r\n      name: \"Moon\",\r\n      mass: 1.0e3,\r\n      radius: 17.37,\r\n      colour: new THREE.Color(0xcccccc),\r\n      position: new THREE.Vector3(5384, 0, -500),\r\n      initialVelocity: new THREE.Vector3(0, -1, -0.75),\r\n      scene: this.threeScene,\r\n    }),\r\n  ];\r\n\r\n  constructor({\r\n    enableGridX,\r\n    enableGridY,\r\n    enableGridZ,\r\n  }: SolarSystemSceneParams) {\r\n    super();\r\n    // setup grid\r\n    if (enableGridX) {\r\n      this.gridX.rotateZ(Math.PI / 2);\r\n      this.threeScene.add(this.gridX);\r\n    }\r\n\r\n    if (enableGridY) {\r\n      this.gridY.rotateX(Math.PI / 2);\r\n      this.threeScene.add(this.gridY);\r\n    }\r\n\r\n    if (enableGridZ) {\r\n      this.threeScene.add(this.gridZ);\r\n    }\r\n\r\n    // turn on trails for visualisation of movement\r\n    this.planets.forEach((planet) => {\r\n      planet.turnOnTrails();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Updates object parameters, typically called called every frame.\r\n   * Delta time used to compensate for inconsistent frame rates.\r\n   * @param {number} deltaTime - Time since last frame in seconds.\r\n   */\r\n  update = (deltaTime: number) => {\r\n    this.planets.forEach((object) => {\r\n      object.updateVelocity(this.planets, deltaTime);\r\n    });\r\n  };\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RenderScene } from \"./renderer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RenderScene name=\"WebGL\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}